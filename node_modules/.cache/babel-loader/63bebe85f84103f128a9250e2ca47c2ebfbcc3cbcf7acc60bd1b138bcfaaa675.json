{"ast":null,"code":"// src/utils/formValidation.js\n\n// Helpers\nconst toNum = v => {\n  if (v === '' || v === null || v === undefined) return NaN;\n  const n = Number(v);\n  return Number.isFinite(n) ? n : NaN;\n};\n\n// 1) Common cross-form validation (required + number type)\nexport function validateCommon(fields, formData) {\n  const errors = {};\n  fields.forEach(field => {\n    const {\n      key,\n      label,\n      isRequired,\n      dataType\n    } = field;\n    const value = formData[key];\n\n    // Required\n    const required = isRequired === true || String(isRequired).toLowerCase() === 'true';\n    if (required && (value === '' || value === null || value === undefined)) {\n      errors[key] = `${label || key} is required`;\n      return; // skip further checks for this field\n    }\n\n    // Number type check (only if value present)\n    if (dataType === 'number' && value !== '' && value !== null && value !== undefined) {\n      const n = toNum(value);\n      if (Number.isNaN(n)) {\n        errors[key] = `${label || key} must be a valid number`;\n      }\n    }\n  });\n  return errors;\n}\n\n// 2) Module-specific validators\nconst moduleValidators = {\n  productionLog: data => {\n    const errs = {};\n    const seedInput = toNum(data.seedInputKgs);\n    const oil = toNum(data.unfilteredOilKgs);\n    const cake = toNum(data.cakeKgs);\n\n    // Only run if the three values are all valid numbers\n    if (![seedInput, oil, cake].some(Number.isNaN)) {\n      //   if (seedInput < 1.1*(oil + cake)) {\n      //     errs.seedInputKgs = `Seed Input (kg) must be ≥ Unfiltered Oil (kg) + Cake (kg).`;\n      //     // Optionally mark the other fields too:\n      //     errs.unfilteredOilKgs ||= 'Check value';\n      //     errs.cakeKgs ||= 'Check value';\n      //   }\n    }\n    return errs;\n  }\n\n  // Add more module rules here:\n  // cashLog: (data) => ({ ... })\n};\n\n// 3) Single entry point that merges common + module-specific\nexport function validateForm(module, fields, formData) {\n  const errors = {\n    ...validateCommon(fields, formData)\n  };\n  if (moduleValidators[module]) {\n    const modErrs = moduleValidators[module](formData);\n    Object.assign(errors, modErrs);\n  }\n  return errors;\n}","map":{"version":3,"names":["toNum","v","undefined","NaN","n","Number","isFinite","validateCommon","fields","formData","errors","forEach","field","key","label","isRequired","dataType","value","required","String","toLowerCase","isNaN","moduleValidators","productionLog","data","errs","seedInput","seedInputKgs","oil","unfilteredOilKgs","cake","cakeKgs","some","validateForm","module","modErrs","Object","assign"],"sources":["/Users/abhilash/Downloads/jp-internal-app/src/utils/formValidation.js"],"sourcesContent":["// src/utils/formValidation.js\n\n// Helpers\nconst toNum = (v) => {\n  if (v === '' || v === null || v === undefined) return NaN;\n  const n = Number(v);\n  return Number.isFinite(n) ? n : NaN;\n};\n\n// 1) Common cross-form validation (required + number type)\nexport function validateCommon(fields, formData) {\n  const errors = {};\n\n  fields.forEach((field) => {\n    const { key, label, isRequired, dataType } = field;\n    const value = formData[key];\n\n    // Required\n    const required = (isRequired === true) || (String(isRequired).toLowerCase() === 'true');\n    if (required && (value === '' || value === null || value === undefined)) {\n      errors[key] = `${label || key} is required`;\n      return; // skip further checks for this field\n    }\n\n    // Number type check (only if value present)\n    if (dataType === 'number' && value !== '' && value !== null && value !== undefined) {\n      const n = toNum(value);\n      if (Number.isNaN(n)) {\n        errors[key] = `${label || key} must be a valid number`;\n      }\n    }\n  });\n\n  return errors;\n}\n\n// 2) Module-specific validators\nconst moduleValidators = {\n  productionLog: (data) => {\n    const errs = {};\n    const seedInput = toNum(data.seedInputKgs);\n    const oil = toNum(data.unfilteredOilKgs);\n    const cake = toNum(data.cakeKgs);\n\n    // Only run if the three values are all valid numbers\n    if (![seedInput, oil, cake].some(Number.isNaN)) {\n    //   if (seedInput < 1.1*(oil + cake)) {\n    //     errs.seedInputKgs = `Seed Input (kg) must be ≥ Unfiltered Oil (kg) + Cake (kg).`;\n    //     // Optionally mark the other fields too:\n    //     errs.unfilteredOilKgs ||= 'Check value';\n    //     errs.cakeKgs ||= 'Check value';\n    //   }\n    }\n    return errs;\n  },\n\n  // Add more module rules here:\n  // cashLog: (data) => ({ ... })\n};\n\n// 3) Single entry point that merges common + module-specific\nexport function validateForm(module, fields, formData) {\n  const errors = { ...validateCommon(fields, formData) };\n\n  if (moduleValidators[module]) {\n    const modErrs = moduleValidators[module](formData);\n    Object.assign(errors, modErrs);\n  }\n\n  return errors;\n}\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,KAAK,GAAIC,CAAC,IAAK;EACnB,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAKC,SAAS,EAAE,OAAOC,GAAG;EACzD,MAAMC,CAAC,GAAGC,MAAM,CAACJ,CAAC,CAAC;EACnB,OAAOI,MAAM,CAACC,QAAQ,CAACF,CAAC,CAAC,GAAGA,CAAC,GAAGD,GAAG;AACrC,CAAC;;AAED;AACA,OAAO,SAASI,cAAcA,CAACC,MAAM,EAAEC,QAAQ,EAAE;EAC/C,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjBF,MAAM,CAACG,OAAO,CAAEC,KAAK,IAAK;IACxB,MAAM;MAAEC,GAAG;MAAEC,KAAK;MAAEC,UAAU;MAAEC;IAAS,CAAC,GAAGJ,KAAK;IAClD,MAAMK,KAAK,GAAGR,QAAQ,CAACI,GAAG,CAAC;;IAE3B;IACA,MAAMK,QAAQ,GAAIH,UAAU,KAAK,IAAI,IAAMI,MAAM,CAACJ,UAAU,CAAC,CAACK,WAAW,CAAC,CAAC,KAAK,MAAO;IACvF,IAAIF,QAAQ,KAAKD,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKf,SAAS,CAAC,EAAE;MACvEQ,MAAM,CAACG,GAAG,CAAC,GAAG,GAAGC,KAAK,IAAID,GAAG,cAAc;MAC3C,OAAO,CAAC;IACV;;IAEA;IACA,IAAIG,QAAQ,KAAK,QAAQ,IAAIC,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKf,SAAS,EAAE;MAClF,MAAME,CAAC,GAAGJ,KAAK,CAACiB,KAAK,CAAC;MACtB,IAAIZ,MAAM,CAACgB,KAAK,CAACjB,CAAC,CAAC,EAAE;QACnBM,MAAM,CAACG,GAAG,CAAC,GAAG,GAAGC,KAAK,IAAID,GAAG,yBAAyB;MACxD;IACF;EACF,CAAC,CAAC;EAEF,OAAOH,MAAM;AACf;;AAEA;AACA,MAAMY,gBAAgB,GAAG;EACvBC,aAAa,EAAGC,IAAI,IAAK;IACvB,MAAMC,IAAI,GAAG,CAAC,CAAC;IACf,MAAMC,SAAS,GAAG1B,KAAK,CAACwB,IAAI,CAACG,YAAY,CAAC;IAC1C,MAAMC,GAAG,GAAG5B,KAAK,CAACwB,IAAI,CAACK,gBAAgB,CAAC;IACxC,MAAMC,IAAI,GAAG9B,KAAK,CAACwB,IAAI,CAACO,OAAO,CAAC;;IAEhC;IACA,IAAI,CAAC,CAACL,SAAS,EAAEE,GAAG,EAAEE,IAAI,CAAC,CAACE,IAAI,CAAC3B,MAAM,CAACgB,KAAK,CAAC,EAAE;MAChD;MACA;MACA;MACA;MACA;MACA;IAAA;IAEA,OAAOI,IAAI;EACb;;EAEA;EACA;AACF,CAAC;;AAED;AACA,OAAO,SAASQ,YAAYA,CAACC,MAAM,EAAE1B,MAAM,EAAEC,QAAQ,EAAE;EACrD,MAAMC,MAAM,GAAG;IAAE,GAAGH,cAAc,CAACC,MAAM,EAAEC,QAAQ;EAAE,CAAC;EAEtD,IAAIa,gBAAgB,CAACY,MAAM,CAAC,EAAE;IAC5B,MAAMC,OAAO,GAAGb,gBAAgB,CAACY,MAAM,CAAC,CAACzB,QAAQ,CAAC;IAClD2B,MAAM,CAACC,MAAM,CAAC3B,MAAM,EAAEyB,OAAO,CAAC;EAChC;EAEA,OAAOzB,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}