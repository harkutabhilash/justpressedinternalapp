{"ast":null,"code":"var _jsxFileName = \"/Users/abhilash/Downloads/jp-internal-app/src/modules/Production.jsx\",\n  _s = $RefreshSig$();\n// src/modules/Production.jsx\nimport React from 'react';\nimport DynamicFormRenderer from '../DynamicFormRenderer';\nimport { fetchLogFormConfig } from '../utils/logFormAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Production() {\n  _s();\n  const [cfg, setCfg] = React.useState(null);\n  const [loading, setLoading] = React.useState(true);\n  const [err, setErr] = React.useState('');\n  React.useEffect(() => {\n    let ok = true;\n    (async () => {\n      try {\n        const {\n          fields,\n          dropdowns\n        } = await fetchLogFormConfig('production');\n        if (!ok) return;\n        setCfg({\n          fields,\n          dropdowns\n        });\n      } catch (e) {\n        setErr('Failed to load form.');\n      } finally {\n        ok && setLoading(false);\n      }\n    })();\n    return () => ok = false;\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: \"Loading\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 23\n  }, this);\n  if (err) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 text-red-600\",\n    children: err\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 19\n  }, this);\n  return /*#__PURE__*/_jsxDEV(DynamicFormRenderer, {\n    module: \"production\",\n    config: cfg.config,\n    dropdowns: cfg.dropdowns\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(Production, \"u+gAB7Q/Z/SjWOxR9zC9SRlC+ak=\");\n_c = Production;\nfunction buildDropdowns(rows) {\n  // rows is array of objects { seedType, machineNumber, operatorName, ... }\n  const out = {};\n  for (const r of rows) {\n    for (const [k, v] of Object.entries(r)) {\n      if (!v) continue;\n      out[k] ||= new Set();\n      out[k].add(String(v));\n    }\n  }\n  // finalize to arrays\n  for (const k of Object.keys(out)) out[k] = Array.from(out[k]).sort();\n  return out;\n}\nvar _c;\n$RefreshReg$(_c, \"Production\");","map":{"version":3,"names":["React","DynamicFormRenderer","fetchLogFormConfig","jsxDEV","_jsxDEV","Production","_s","cfg","setCfg","useState","loading","setLoading","err","setErr","useEffect","ok","fields","dropdowns","e","className","children","fileName","_jsxFileName","lineNumber","columnNumber","module","config","_c","buildDropdowns","rows","out","r","k","v","Object","entries","Set","add","String","keys","Array","from","sort","$RefreshReg$"],"sources":["/Users/abhilash/Downloads/jp-internal-app/src/modules/Production.jsx"],"sourcesContent":["// src/modules/Production.jsx\nimport React from 'react';\nimport DynamicFormRenderer from '../DynamicFormRenderer';\nimport { fetchLogFormConfig } from '../utils/logFormAPI';\n\nexport default function Production() {\n  const [cfg, setCfg] = React.useState(null);\n  const [loading, setLoading] = React.useState(true);\n  const [err, setErr] = React.useState('');\n\n  React.useEffect(() => {\n    let ok = true;\n    (async () => {\n      try {\n         const { fields, dropdowns } = await fetchLogFormConfig('production');\n         if (!ok) return;\n         setCfg({ fields, dropdowns });\n      } catch (e) {\n        setErr('Failed to load form.');\n      } finally {\n        ok && setLoading(false);\n      }\n    })();\n    return () => (ok = false);\n  }, []);\n\n  if (loading) return <div className=\"p-6\">Loadingâ€¦</div>;\n  if (err) return <div className=\"p-6 text-red-600\">{err}</div>;\n\n  return (\n    <DynamicFormRenderer\n      module=\"production\"\n      config={cfg.config}\n      dropdowns={cfg.dropdowns}\n    />\n  );\n}\n\nfunction buildDropdowns(rows) {\n  // rows is array of objects { seedType, machineNumber, operatorName, ... }\n  const out = {};\n  for (const r of rows) {\n    for (const [k, v] of Object.entries(r)) {\n      if (!v) continue;\n      out[k] ||= new Set();\n      out[k].add(String(v));\n    }\n  }\n  // finalize to arrays\n  for (const k of Object.keys(out)) out[k] = Array.from(out[k]).sort();\n  return out;\n}\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,mBAAmB,MAAM,wBAAwB;AACxD,SAASC,kBAAkB,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,KAAK,CAACS,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACG,GAAG,EAAEC,MAAM,CAAC,GAAGb,KAAK,CAACS,QAAQ,CAAC,EAAE,CAAC;EAExCT,KAAK,CAACc,SAAS,CAAC,MAAM;IACpB,IAAIC,EAAE,GAAG,IAAI;IACb,CAAC,YAAY;MACX,IAAI;QACD,MAAM;UAAEC,MAAM;UAAEC;QAAU,CAAC,GAAG,MAAMf,kBAAkB,CAAC,YAAY,CAAC;QACpE,IAAI,CAACa,EAAE,EAAE;QACTP,MAAM,CAAC;UAAEQ,MAAM;UAAEC;QAAU,CAAC,CAAC;MAChC,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVL,MAAM,CAAC,sBAAsB,CAAC;MAChC,CAAC,SAAS;QACRE,EAAE,IAAIJ,UAAU,CAAC,KAAK,CAAC;MACzB;IACF,CAAC,EAAE,CAAC;IACJ,OAAO,MAAOI,EAAE,GAAG,KAAM;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIL,OAAO,EAAE,oBAAON,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,EAAC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACvD,IAAIZ,GAAG,EAAE,oBAAOR,OAAA;IAAKe,SAAS,EAAC,kBAAkB;IAAAC,QAAA,EAAER;EAAG;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAE7D,oBACEpB,OAAA,CAACH,mBAAmB;IAClBwB,MAAM,EAAC,YAAY;IACnBC,MAAM,EAAEnB,GAAG,CAACmB,MAAO;IACnBT,SAAS,EAAEV,GAAG,CAACU;EAAU;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEN;AAAClB,EAAA,CA/BuBD,UAAU;AAAAsB,EAAA,GAAVtB,UAAU;AAiClC,SAASuB,cAAcA,CAACC,IAAI,EAAE;EAC5B;EACA,MAAMC,GAAG,GAAG,CAAC,CAAC;EACd,KAAK,MAAMC,CAAC,IAAIF,IAAI,EAAE;IACpB,KAAK,MAAM,CAACG,CAAC,EAAEC,CAAC,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,CAAC,CAAC,EAAE;MACtC,IAAI,CAACE,CAAC,EAAE;MACRH,GAAG,CAACE,CAAC,CAAC,KAAK,IAAII,GAAG,CAAC,CAAC;MACpBN,GAAG,CAACE,CAAC,CAAC,CAACK,GAAG,CAACC,MAAM,CAACL,CAAC,CAAC,CAAC;IACvB;EACF;EACA;EACA,KAAK,MAAMD,CAAC,IAAIE,MAAM,CAACK,IAAI,CAACT,GAAG,CAAC,EAAEA,GAAG,CAACE,CAAC,CAAC,GAAGQ,KAAK,CAACC,IAAI,CAACX,GAAG,CAACE,CAAC,CAAC,CAAC,CAACU,IAAI,CAAC,CAAC;EACpE,OAAOZ,GAAG;AACZ;AAAC,IAAAH,EAAA;AAAAgB,YAAA,CAAAhB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}