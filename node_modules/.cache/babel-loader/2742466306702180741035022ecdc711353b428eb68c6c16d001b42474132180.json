{"ast":null,"code":"var _jsxFileName = \"/Users/abhilash/Downloads/jp-internal-app/src/LogManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DynamicFormRenderer from './DynamicFormRenderer.js';\nimport Loader from './components/Loader';\nimport { fetchLogFormConfig } from './utils/logFormAPI.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LogManagement({\n  module\n}) {\n  _s();\n  const [config, setConfig] = useState([]);\n  const [dropdowns, setDropdowns] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const loadConfig = async () => {\n      setLoading(true);\n      try {\n        const {\n          configRows,\n          dropdownMap\n        } = await fetchLogFormConfig(module);\n        //const [headers, ...rows] = configRows;\n\n        // If backend sends array-of-objects (your current case), use as-is.\n        // If it ever sends array-of-arrays, normalize it (fallback).\n        let formatted = configRows;\n        if (Array.isArray(configRows) && Array.isArray(configRows[0])) {\n          const [headers, ...rows] = configRows;\n          formatted = rows.map(row => headers.reduce((obj, key, i) => {\n            obj[key] = row[i];\n            return obj;\n          }, {}));\n        }\n\n        // Coerce booleans to real booleans so UI filters work\n        formatted = formatted.map(f => ({\n          ...f,\n          showInApp: f.showInApp === true || String(f.showInApp).toLowerCase() === 'true',\n          isRequired: f.isRequired === true || String(f.isRequired).toLowerCase() === 'true'\n        }));\n        setConfig(formatted);\n        setDropdowns(dropdownMap || {});\n      } catch (err) {\n        console.error('Failed to load form config', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (module) loadConfig();\n  }, [module]);\n  if (loading) return /*#__PURE__*/_jsxDEV(Loader, {\n    message: `Setting up ${module} form...`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-panel\",\n    children: /*#__PURE__*/_jsxDEV(DynamicFormRenderer, {\n      config: config,\n      dropdowns: dropdowns,\n      module: module\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(LogManagement, \"gKdDM4BR0HGL7aw2RtjpBXHT3eA=\");\n_c = LogManagement;\nexport default LogManagement;\nvar _c;\n$RefreshReg$(_c, \"LogManagement\");","map":{"version":3,"names":["React","useEffect","useState","DynamicFormRenderer","Loader","fetchLogFormConfig","jsxDEV","_jsxDEV","LogManagement","module","_s","config","setConfig","dropdowns","setDropdowns","loading","setLoading","loadConfig","configRows","dropdownMap","formatted","Array","isArray","headers","rows","map","row","reduce","obj","key","i","f","showInApp","String","toLowerCase","isRequired","err","console","error","message","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/Users/abhilash/Downloads/jp-internal-app/src/LogManagement.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DynamicFormRenderer from './DynamicFormRenderer.js';\nimport Loader from './components/Loader';\nimport { fetchLogFormConfig } from './utils/logFormAPI.js';\n\nfunction LogManagement({ module }) {\n  const [config, setConfig] = useState([]);\n  const [dropdowns, setDropdowns] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadConfig = async () => {\n      setLoading(true);\n      try {\n        const { configRows, dropdownMap } = await fetchLogFormConfig(module);\n          //const [headers, ...rows] = configRows;\n\n         // If backend sends array-of-objects (your current case), use as-is.\n        // If it ever sends array-of-arrays, normalize it (fallback).\n        let formatted = configRows;\n        if (Array.isArray(configRows) && Array.isArray(configRows[0])) {\n          const [headers, ...rows] = configRows;\n          formatted = rows.map(row =>\n            headers.reduce((obj, key, i) => {\n              obj[key] = row[i];\n              return obj;\n            }, {})\n          );\n        }\n\n        // Coerce booleans to real booleans so UI filters work\n        formatted = formatted.map(f => ({\n          ...f,\n          showInApp: f.showInApp === true || String(f.showInApp).toLowerCase() === 'true',\n          isRequired: f.isRequired === true || String(f.isRequired).toLowerCase() === 'true',\n        }));\n\n        setConfig(formatted);\n        setDropdowns(dropdownMap || {});\n      } catch (err) {\n        console.error('Failed to load form config', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (module) loadConfig();\n  }, [module]);\n\n  if (loading) return <Loader message={`Setting up ${module} form...`} />;\n\n  return (\n    <div className=\"content-panel\">\n      {/* <h2 className=\"content-header\">{module} Entry Form</h2> */}\n      <DynamicFormRenderer config={config} dropdowns={dropdowns} module={module} />\n    </div>\n  );\n}\n\nexport default LogManagement;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}