{"ast":null,"code":"var _s = $RefreshSig$();\nimport * as React from \"react\";\nimport { callBackend } from \"../utils/moduleStructureAPI\";\nexport function useMasterForm(masterType, {\n  initialValues = {},\n  customValidate\n} = {}) {\n  _s();\n  const [schema, setSchema] = React.useState(null);\n  const [values, setValues] = React.useState(initialValues);\n  const [errors, setErrors] = React.useState({});\n  const [loading, setLoading] = React.useState(false);\n  const [submitting, setSubmitting] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  React.useEffect(() => {\n    (async () => {\n      setLoading(true);\n      try {\n        const res = await callBackend(\"getFormConfigForMaster\", {\n          masterType\n        });\n        if (res !== null && res !== void 0 && res.success) {\n          setSchema(res.data);\n          // initialize values for visible fields\n          const init = {};\n          res.data.fields.forEach(f => {\n            var _initialValues$f$key;\n            if (f.showInApp) init[f.key] = (_initialValues$f$key = initialValues[f.key]) !== null && _initialValues$f$key !== void 0 ? _initialValues$f$key : \"\";\n          });\n          setValues(init);\n        }\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [masterType]);\n  const setField = (key, val) => {\n    setValues(prev => ({\n      ...prev,\n      [key]: val\n    }));\n    setErrors(prev => ({\n      ...prev,\n      [key]: \"\"\n    })); // clear per-field error\n  };\n  const validate = () => {\n    const next = {};\n    if (!schema) return next;\n    schema.fields.forEach(f => {\n      if (f.required && (values[f.key] === \"\" || values[f.key] === undefined)) {\n        next[f.key] = `${f.label || f.key} is required`;\n      }\n      // primitive number check\n      if (/^float|^number/i.test(String(f.dataType)) && values[f.key] !== \"\") {\n        const n = Number(values[f.key]);\n        if (Number.isNaN(n)) next[f.key] = `${f.label || f.key} must be a number`;\n      }\n    });\n\n    // optional custom rule (e.g., production mass balance)\n    if (typeof customValidate === \"function\") {\n      const msg = customValidate(values);\n      if (msg) next.validation = msg;\n    }\n    setErrors(next);\n    return Object.keys(next).length === 0;\n  };\n  const submit = async (extra = {}) => {\n    if (!validate()) return {\n      success: false\n    };\n    setSubmitting(true);\n    try {\n      const user = JSON.parse(sessionStorage.getItem(\"user\") || \"{}\");\n      const payload = {\n        ...values,\n        // auto columns expected by your master:\n        date: extra.date || new Date().toLocaleDateString(\"en-GB\", {\n          day: '2-digit',\n          month: 'short',\n          year: 'numeric'\n        }).replace(/ /g, '-'),\n        createdOn: extra.createdOn || new Date().toLocaleString(\"en-GB\", {\n          day: '2-digit',\n          month: 'short',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          hour12: false\n        }).replace(/,/g, ''),\n        createdBy: extra.createdBy || (user === null || user === void 0 ? void 0 : user.username) || (user === null || user === void 0 ? void 0 : user.userid) || \"unknown\"\n      };\n      const res = await callBackend(\"submitMasterRow\", {\n        masterType,\n        payload\n      });\n      if (res !== null && res !== void 0 && res.success) {\n        setSuccess(true);\n        // reset shown fields\n        const blank = {};\n        schema.fields.forEach(f => {\n          if (f.showInApp) blank[f.key] = \"\";\n        });\n        setValues(blank);\n        return {\n          success: true\n        };\n      }\n      setErrors(prev => ({\n        ...prev,\n        validation: (res === null || res === void 0 ? void 0 : res.message) || \"Failed to submit\"\n      }));\n      return {\n        success: false\n      };\n    } catch (e) {\n      setErrors(prev => ({\n        ...prev,\n        validation: \"Something went wrong\"\n      }));\n      return {\n        success: false\n      };\n    } finally {\n      setSubmitting(false);\n      setTimeout(() => setSuccess(false), 1800);\n    }\n  };\n  return {\n    schema,\n    values,\n    setField,\n    errors,\n    loading,\n    submitting,\n    success,\n    submit\n  };\n}\n_s(useMasterForm, \"l2OfbajSA4KGzCzM1PX3n30yWnc=\");","map":{"version":3,"names":["React","callBackend","useMasterForm","masterType","initialValues","customValidate","_s","schema","setSchema","useState","values","setValues","errors","setErrors","loading","setLoading","submitting","setSubmitting","success","setSuccess","useEffect","res","data","init","fields","forEach","f","_initialValues$f$key","showInApp","key","setField","val","prev","validate","next","required","undefined","label","test","String","dataType","n","Number","isNaN","msg","validation","Object","keys","length","submit","extra","user","JSON","parse","sessionStorage","getItem","payload","date","Date","toLocaleDateString","day","month","year","replace","createdOn","toLocaleString","hour","minute","second","hour12","createdBy","username","userid","blank","message","e","setTimeout"],"sources":["/Users/abhilash/Downloads/jp-internal-app/src/hooks/useMasterForm.js"],"sourcesContent":["import * as React from \"react\";\nimport { callBackend } from \"../utils/moduleStructureAPI\";\n\nexport function useMasterForm(masterType, { initialValues = {}, customValidate } = {}) {\n  const [schema, setSchema] = React.useState(null);\n  const [values, setValues] = React.useState(initialValues);\n  const [errors, setErrors] = React.useState({});\n  const [loading, setLoading] = React.useState(false);\n  const [submitting, setSubmitting] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n\n  React.useEffect(() => {\n    (async () => {\n      setLoading(true);\n      try {\n        const res = await callBackend(\"getFormConfigForMaster\", { masterType });\n        if (res?.success) {\n          setSchema(res.data);\n          // initialize values for visible fields\n          const init = {};\n          res.data.fields.forEach(f => { if (f.showInApp) init[f.key] = initialValues[f.key] ?? \"\"; });\n          setValues(init);\n        }\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [masterType]);\n\n  const setField = (key, val) => {\n    setValues(prev => ({ ...prev, [key]: val }));\n    setErrors(prev => ({ ...prev, [key]: \"\" })); // clear per-field error\n  };\n\n  const validate = () => {\n    const next = {};\n    if (!schema) return next;\n\n    schema.fields.forEach((f) => {\n      if (f.required && (values[f.key] === \"\" || values[f.key] === undefined)) {\n        next[f.key] = `${f.label || f.key} is required`;\n      }\n      // primitive number check\n      if (/^float|^number/i.test(String(f.dataType)) && values[f.key] !== \"\") {\n        const n = Number(values[f.key]);\n        if (Number.isNaN(n)) next[f.key] = `${f.label || f.key} must be a number`;\n      }\n    });\n\n    // optional custom rule (e.g., production mass balance)\n    if (typeof customValidate === \"function\") {\n      const msg = customValidate(values);\n      if (msg) next.validation = msg;\n    }\n\n    setErrors(next);\n    return Object.keys(next).length === 0;\n  };\n\n  const submit = async (extra = {}) => {\n    if (!validate()) return { success: false };\n\n    setSubmitting(true);\n    try {\n      const user = JSON.parse(sessionStorage.getItem(\"user\") || \"{}\");\n      const payload = {\n        ...values,\n        // auto columns expected by your master:\n        date: extra.date || new Date().toLocaleDateString(\"en-GB\", { day:'2-digit', month:'short', year:'numeric' }).replace(/ /g, '-'),\n        createdOn: extra.createdOn || new Date().toLocaleString(\"en-GB\", { day:'2-digit', month:'short', year:'numeric', hour:'2-digit', minute:'2-digit', second:'2-digit', hour12:false }).replace(/,/g, ''),\n        createdBy: extra.createdBy || user?.username || user?.userid || \"unknown\",\n      };\n\n      const res = await callBackend(\"submitMasterRow\", { masterType, payload });\n      if (res?.success) {\n        setSuccess(true);\n        // reset shown fields\n        const blank = {};\n        schema.fields.forEach(f => { if (f.showInApp) blank[f.key] = \"\"; });\n        setValues(blank);\n        return { success: true };\n      }\n      setErrors(prev => ({ ...prev, validation: res?.message || \"Failed to submit\" }));\n      return { success: false };\n    } catch (e) {\n      setErrors(prev => ({ ...prev, validation: \"Something went wrong\" }));\n      return { success: false };\n    } finally {\n      setSubmitting(false);\n      setTimeout(() => setSuccess(false), 1800);\n    }\n  };\n\n  return { schema, values, setField, errors, loading, submitting, success, submit };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}